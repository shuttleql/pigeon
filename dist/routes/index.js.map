{"version":3,"sources":["../../src/routes/index.js"],"names":[],"mappings":";;;;;;;;uBAAoB,SAAS;;;;sBACV,WAAW;;;;sBACX,WAAW;;;;AAE9B,IAAM,MAAM,GAAG,qBAAQ,MAAM,EAAE,CAAC;;AAEhC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAC5B,KAAG,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,aAAa,EAAC,CAAC,CAAC;CACpC,CAAC,CAAC;;AAEH,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,eAAe,EAAE,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAK;AACtE,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;AACjC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC7C,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;;AAE/C,SAAO,CAAC,GAAG,CAAC;AACV,WAAO,EAAP,OAAO,EAAE,OAAO,EAAP,OAAO,EAAE,SAAS,EAAT,SAAS;GAC5B,CAAC,CAAC;;AAEH,UAAQ,OAAO;AACb,SAAK,QAAQ;AACX,0BAAO,IAAI,CAAC,OAAO,EAAE;AACnB,gBAAQ,EAAE,OAAO,CAAC,QAAQ;OAC3B,CAAC,CAAC;AACH,YAAM;AAAA,AACR,SAAK,cAAc;AACjB,0BAAO,IAAI,CAAC,OAAO,EAAE;AACnB,eAAO,EAAE,OAAO,CAAC,OAAO;OACzB,CAAC,CAAC;AAAA,GACN;;AAED,KAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;CACvB,CAAC,CAAC;;;AAGH,SAAS,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AACvC,KAAG,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;AAEhC,MAAI,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,0BAA0B,EAAE;AAChD,WAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACrD,WAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;GAC9B;;AAED,MAAI,GAAG,CAAC,OAAO,CAAC,4BAA4B,CAAC,KAAK,oBAAO,eAAe,IAAI,GAAG,CAAC,OAAO,CAAC,qBAAqB,CAAC,KAAK,oBAAO,QAAQ,EAAE;AAClI,QAAI,EAAE,CAAC;GACR,MAAM;AACL,WAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACzB,QAAI,CAAC,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC;GAC9C;CACF;;qBAEc,MAAM","file":"index.js","sourcesContent":["import express from 'express';\nimport Socket from '../socket';\nimport config from '../config';\n\nconst router = express.Router();\n\nrouter.get('/', (req, res) => {\n  res.send({message: 'Chirp chirp'});\n});\n\nrouter.post('/adminNotifications', authenticateSns, (req, res, next) => {\n  const subject = req.body.Subject;\n  const message = JSON.parse(req.body.Message);\n  const timestamp = new Date(req.body.Timestamp);\n\n  console.log({\n    subject, message, timestamp\n  });\n\n  switch (subject) {\n    case 'update':\n      Socket.emit(subject, {\n        resource: message.resource\n      });\n      break;\n    case 'announcement':\n      Socket.emit(subject, {\n        message: message.message\n      });\n  }\n\n  res.status(200).end();\n});\n\n// middleware to ensure that requests are coming from Amazon\nfunction authenticateSns(req, res, next) {\n  req.body = JSON.parse(req.body);\n\n  if (req.body.Type === 'SubscriptionConfirmation') {\n    console.log('SubscribeURL: ', req.body.SubscribeURL);\n    return res.status(200).end();\n  }\n\n  if (req.headers['x-amz-sns-subscription-arn'] === config.subscriptionArn && req.headers['x-amz-sns-topic-arn'] === config.topicArn) {\n    next();\n  } else {\n    console.log(req.headers);\n    next(new Error('SNS Authentication failed'));\n  }\n}\n\nexport default router;\n"]}